apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: e-learning
data:
  application.yml: |
    server:
      port: 8082
      
    spring:
      application:
        name: user-service
      datasource:
        url: jdbc:postgresql://postgres.e-learning.svc.cluster.local:5432/user_service_db
        username: postgres
        password: ${POSTGRES_PASSWORD}
        driver-class-name: org.postgresql.Driver
      jpa:
        hibernate:
          ddl-auto: update
        show-sql: false
        properties:
          hibernate:
            format_sql: true
            dialect: org.hibernate.dialect.PostgreSQLDialect
      kafka:
        bootstrap-servers: kafka.e-learning.svc.cluster.local:9092
        producer:
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
        consumer:
          group-id: user-service-group
          auto-offset-reset: earliest
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
          properties:
            spring.json.trusted.packages: com.elearning.userservice.dto
      
      # Configure service discovery with Kubernetes
      cloud:
        kubernetes:
          discovery:
            all-namespaces: false
    
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          show-details: always
      metrics:
        export:
          prometheus:
            enabled: true
      tracing:
        sampling:
          probability: 1.0
          
    logging:
      pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: e-learning
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: ${DOCKER_REGISTRY:-localhost:5000}/user-service:latest
        ports:
        - containerPort: 8082
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        envFrom:
        - configMapRef:
            name: common-config
        volumeMounts:
        - name: user-service-config
          mountPath: /workspace/config
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
      volumes:
      - name: user-service-config
        configMap:
          name: user-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: e-learning
spec:
  selector:
    app: user-service
  ports:
  - port: 8082
    targetPort: 8082
  type: ClusterIP 