package com.hasandag.aiservice.provider;

import com.hasandag.aiservice.dto.AiRequest;
import com.hasandag.aiservice.dto.AiResponse;
import com.hasandag.aiservice.util.Logger;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Component
public class PoeProvider implements AiProvider {
    private static final org.slf4j.Logger log = Logger.getLogger(PoeProvider.class);

    @Value("${ai.provider:openai}")
    private String activeProvider;

    @Value("${poe.api.key:default-key}")
    private String apiKey;

    @Value("${poe.api.url:https://api.poe.com/api/}")
    private String apiUrl;

    @Value("${poe.api.bot:chinchilla}")
    private String bot;

    @Value("${poe.api.timeout:60}")
    private int timeout;

    private WebClient webClient;

    @PostConstruct
    public void init() {
        this.webClient = WebClient.builder()
                .baseUrl(apiUrl)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultHeader("x-api-key", apiKey)
                .build();
        log.debug("Initialized Poe provider with URL: {}, bot: {}", apiUrl, bot);
    }

    @Override
    public boolean isActive() {
        return "poe".equalsIgnoreCase(activeProvider);
    }

    @Override
    public AiResponse processQuestion(AiRequest request) {
        log.info("Processing question with Poe provider: {}", request.getQuestion());

        try {
            // For debugging - return a mock response until we can fix the Poe API integration
            String mockAnswer = "This is a mock response from the Poe provider while we debug the API integration. " +
                    "Your question was: " + request.getQuestion();
            
            return AiResponse.builder()
                    .answer(mockAnswer)
                    .questionId(UUID.randomUUID().toString())
                    .timestamp(LocalDateTime.now())
                    .sourceReferences("Generated by Mock Poe AI (debugging)")
                    .courseId(request.getCourseId())
                    .userId(request.getUserId())
                    .success(true)
                    .build();
                
            /* Original implementation - temporarily commented out for debugging
            String question = addContextToQuestion(request);

            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("message", question);
            requestBody.put("bot", bot);
            requestBody.put("conversation_id", request.getCourseId() != null ? request.getCourseId() : UUID.randomUUID().toString());

            PoeResponse poeResponse = webClient.post()
                    .uri("chat")
                    .bodyValue(requestBody)
                    .retrieve()
                    .bodyToMono(PoeResponse.class)
                    .timeout(Duration.ofSeconds(timeout))
                    .block();

            String answer = poeResponse != null ? poeResponse.text : "No response from Poe AI";

            return AiResponse.builder()
                    .answer(answer)
                    .questionId(UUID.randomUUID().toString())
                    .timestamp(LocalDateTime.now())
                    .sourceReferences("Generated by Poe AI")
                    .courseId(request.getCourseId())
                    .userId(request.getUserId())
                    .success(true)
                    .build();
            */
        } catch (Exception e) {
            log.error("Failed to process Poe request: {}", e.getMessage(), e);
            return AiResponse.builder()
                    .success(false)
                    .errorMessage("Failed to process Poe request: " + e.getMessage())
                    .timestamp(LocalDateTime.now())
                    .build();
        }
    }

    private String addContextToQuestion(AiRequest request) {
        StringBuilder questionWithContext = new StringBuilder();
        
        if (request.getCourseId() != null && !request.getCourseId().isEmpty()) {
            questionWithContext.append("For course ID: ").append(request.getCourseId()).append("\n\n");
        }
        
        if (request.getContext() != null && !request.getContext().isEmpty()) {
            questionWithContext.append("Context: ").append(request.getContext()).append("\n\n");
        }
        
        questionWithContext.append("Question: ").append(request.getQuestion());
        
        return questionWithContext.toString();
    }

    private static class PoeResponse {
        private String text;
    }
} 