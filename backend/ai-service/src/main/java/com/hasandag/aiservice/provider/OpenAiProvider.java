package com.hasandag.aiservice.provider;

import com.hasandag.aiservice.dto.AiRequest;
import com.hasandag.aiservice.dto.AiResponse;
import com.hasandag.aiservice.util.Logger;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.UUID;

@Component
@Primary
public class OpenAiProvider implements AiProvider {
    private static final org.slf4j.Logger log = Logger.getLogger(OpenAiProvider.class);

    private final ChatClient chatClient;

    @Value("${ai.provider}")
    private String activeProvider;

    @Autowired
    public OpenAiProvider(ChatClient.Builder chatClientBuilder) {
        this.chatClient = chatClientBuilder.build();
    }

    @Override
    public boolean isActive() {
        return "openai".equalsIgnoreCase(activeProvider);
    }

    @Override
    public AiResponse processQuestion(AiRequest request) {
        log.info("Processing question with OpenAI provider: {}", request.getQuestion());
        
        try {
            // Build the system prompt
            String systemPrompt = buildSystemPrompt(request);
            
            // Use the new fluent API
            String answer = chatClient.prompt()
                    .system(systemPrompt)
                    .user(request.getQuestion())
                    .call()
                    .content();
            
            return AiResponse.builder()
                    .answer(answer)
                    .questionId(UUID.randomUUID().toString())
                    .timestamp(LocalDateTime.now())
                    .sourceReferences(generateSourceReference())
                    .courseId(request.getCourseId())
                    .userId(request.getUserId())
                    .success(true)
                    .build();
        } catch (Exception e) {
            log.error("Error processing OpenAI request", e);
            return AiResponse.builder()
                    .success(false)
                    .errorMessage("Failed to process OpenAI request: " + e.getMessage())
                    .timestamp(LocalDateTime.now())
                    .build();
        }
    }
    
    private String buildSystemPrompt(AiRequest request) {
        StringBuilder sb = new StringBuilder();
        sb.append("You are an educational AI assistant helping students with their questions. ");
        
        if (request.getCourseId() != null && !request.getCourseId().isEmpty()) {
            sb.append("This question is related to course ID: ").append(request.getCourseId()).append(". ");
        }
        
        if (request.getContext() != null && !request.getContext().isEmpty()) {
            sb.append("Context: ").append(request.getContext());
        }
        
        sb.append("Please provide a concise and accurate answer to the student's question.");
        return sb.toString();
    }
    
    private String generateSourceReference() {
        // In a real implementation, this might extract sources from the model response
        // For now, just return a placeholder
        return "Generated by OpenAI";
    }
} 